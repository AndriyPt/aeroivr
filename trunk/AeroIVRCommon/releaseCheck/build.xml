<?xml version="1.0" encoding="UTF-8"?>

<project name="org.aeroivr.common.utils" default="coverage" basedir=".">

        <description>
           Build project and tests.
           Run cobertura code coverage tool.
           Run check style tool.
           Check code coverage percentage. It should be greater than 80% lines of code.
        </description>

        <property file="build.properties" />

        <path id="cobertura.classpath">
                <fileset dir="${cobertura.dir}">
                        <include name="cobertura.jar" />
                        <include name="*.jar" />
                </fileset>
        </path>
        <path id="checkstyle.classpath">
                <fileset dir="${checkstyle.dir}">
                        <include name="checkstyle-all-4.3.jar" />
                        <include name="*.jar" />
                </fileset>
        </path>
        <path id="test.lib.classpath">
                <fileset dir="${easymock.dir}">
                        <include name="*.jar" />
                </fileset>
                <fileset dir="${easymock.classextension.dir}">
                        <include name="*.jar" />
                </fileset>         
        </path>
        <path id="junit.classpath">
                <pathelement path="${junit.dir}/junit-3.8.1.jar" />
        </path>

        <taskdef classpathref="cobertura.classpath" resource="tasks.properties"/>
        <taskdef classpathref="checkstyle.classpath" resource="checkstyletask.properties"/>


        <target name="init">
                <mkdir dir="${classes.dir}" />
                <mkdir dir="${instrumented.dir}" />
                <mkdir dir="${reports.xml.dir}" />
                <mkdir dir="${reports.html.dir}" />
                <mkdir dir="${coverage.html.dir}" />
                <mkdir dir="${checkstyle.xml.dir}" />
                <mkdir dir="${checkstyle.html.dir}" />
        </target>

        <target name="checkstyle" depends="init" 
                description="Generates a report of code convention violations.">


                <checkstyle config="${checkstyle.settings}" failureProperty="checkstyle.failure"
                        failOnViolation="false">

                        <formatter type="xml" tofile="${checkstyle.xml.dir}/checkstyle_report.xml"/>
                        <fileset dir="${src.dir}" includes="**/*.java"/>
                        <fileset dir="${test.dir}" includes="**/*.java"/>
                </checkstyle>

                <xslt in="${checkstyle.xml.dir}/checkstyle_report.xml" out="${checkstyle.xml.dir}/checkstyle_report_fixed.xml" 
			style="${checkstyle.dir}/checkstyle-fix-output.xsl"/>

                <xslt in="${checkstyle.xml.dir}/checkstyle_report_fixed.xml" out="${checkstyle.html.dir}/checkstyle_report.html" 
			style="${checkstyle.dir}/checkstyle-simple.xsl"/>
        </target>

        <target name="compile" depends="init">
                <javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes">
                        <classpath refid="cobertura.classpath" />
                </javac>
                <javac srcdir="${test.dir}" destdir="${classes.dir}" debug="yes">
                        <classpath refid="cobertura.classpath" />
                        <classpath refid="test.lib.classpath" />
                        <classpath refid="junit.classpath"  />
                </javac>
        </target>

        <target name="instrument" depends="init,compile">
                <!--
                        Remove the coverage data file and any old instrumentation.
                -->
                <delete file="cobertura.ser"/>
                <delete dir="${instrumented.dir}" />

                <!--
                        Instrument the application classes, writing the
                        instrumented classes into ${build.instrumented.dir}.
                -->
                <cobertura-instrument todir="${instrumented.dir}">
                        <!--
                                The following line causes instrument to ignore any
                                source line containing a reference to log4j, for the
                                purposes of coverage reporting.
                        -->
                        <ignore regex="org.apache.log4j.*" />

                        <fileset dir="${classes.dir}">
                                <!--
                                        Instrument all the application classes, but
                                        don't instrument the test classes.
                                -->
                                <include name="**/*.class" />
                                <exclude name="**/ApplicationConstants.class" />
                                <exclude name="**/*Test.class" />
                                <exclude name="**/BaseTestWithServiceLocator.class" />
                        </fileset>
                </cobertura-instrument>
        </target>

        <target name="test" depends="init,compile">
                <junit fork="yes" dir="${basedir}" failureProperty="test.failed">
                        <!--
                                Note the classpath order: instrumented classes are before the
                                original (uninstrumented) classes.  This is important.
                        -->
                        <classpath location="${instrumented.dir}" />
                        <classpath location="${classes.dir}" />

                        <!--
                                The instrumented classes reference classes used by the
                                Cobertura runtime, so Cobertura and its dependencies
                                must be on your classpath.
                        -->
                        <classpath refid="cobertura.classpath" />
                        <classpath refid="test.lib.classpath" />
                        <classpath refid="junit.classpath" />

                        <formatter type="xml" />
                        <test name="${testcase}" todir="${reports.xml.dir}" if="testcase" />
                        <batchtest todir="${reports.xml.dir}" unless="testcase">
                                <fileset dir="${test.dir}">
                                        <include name="**/*Test.java" />
                                </fileset>
                        </batchtest>
                </junit>

                <junitreport todir="${reports.xml.dir}">
                        <fileset dir="${reports.xml.dir}">
                                <include name="TEST-*.xml" />
                        </fileset>
                        <report format="frames" todir="${reports.html.dir}" />
                </junitreport>
        </target>

        <target name="coverage-check">
                <cobertura-check branchrate="0" totallinerate="80" />
        </target>

        <target name="coverage-report">
                <!--
                        Generate a series of HTML files containing the coverage
                        data in a user-readable form using nested source filesets.
                -->
                <cobertura-report destdir="${coverage.html.dir}">
                        <fileset dir="${src.dir}">
                                <include name="**/*.java"/>
                                <exclude name="**/ApplicationConstants.java" />
                        </fileset>
                </cobertura-report>
        </target>

        <target name="clean" description="Remove all files created by the build/test process.">
                <delete dir="${classes.dir}" />
                <delete dir="${instrumented.dir}" />
                <delete dir="${reports.dir}" />
                <delete file="cobertura.log" />
                <delete file="cobertura.ser" />
        </target>

        <target name="coverage" depends="compile,instrument,test,coverage-report,checkstyle" 
                description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports."/>

</project>
